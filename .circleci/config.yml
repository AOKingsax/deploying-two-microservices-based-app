version: 2.1
orbs:
  slack: circleci/slack@4.12.1
  aws-cli: circleci/aws-cli@3.1.4

commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_terraform:
    description: install Terraform
    steps:
      - run:
          name: install terraform
          command: |
            wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt update && sudo apt install terraform

  install_kubectl:
    description: install kubectl for kubernetes
    steps:
      - run:
          name: install kubectl
          command: |
            sudo apt-get update
            sudo apt-get install -y ca-certificates curl
            sudo apt-get install -y apt-transport-https
            sudo curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
            echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
            sudo apt-get update
            sudo apt-get install -y kubectl
            kubectl version --client --output=yaml

  install_helm:
    description: installing helm for kubernetes package manager
    steps:
      - run:
          name: install helm
          command: |
            curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | tee /usr/share/keyrings/helm.gpg > /dev/null
            apt-get install apt-transport-https --yes
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | tee /etc/apt/sources.list.d/helm-stable-debian.list
            sudo apt update
            sudo apt install helm
            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
            helm repo add stable https://charts.helm.sh/stable
            helm repo add grafana https://grafana.github.io/helm-charts
            helm repo update

jobs:
  build-docker-image:
    docker:
      - image: docker:23.0.1-cli
      # - image: royalkingsax/ubuntu:latest
      #   auth:
      #     username: royalkingsax
      #     password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      # - run:
      #     name: install docker
      #     command: |
      #       apt update
      #       apt install systemd -y
      #       apt install docker.io -y
      #       systemctl start docker
      - run:
          name: build and push docker image
          command: |
            cd laravel-app/app
            docker build -t royalkingsax/laravel-app:latest .
            docker login -u $REGISTRY_USER -p $REGISTRY_PASS
            docker push royalkingsax/laravel-app:latest

  create-eks-cluster:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_terraform
      - run:
          name: terraform create eks cluster
          command: |
            cd .circleci/terraform
            terraform init
            terraform plan -out sf.tfplan
            # terraform apply "sf.tfplan"

  deploy-sock-shop-app:
    docker:
      - image: ubuntu-2204:2023.02.1
    steps:
      - checkout
      - run:
          name: install zip file compressor
          command: |
            sudo apt install zip -y
      - install_awscli
      - install_kubectl
      - run:
          name: update the local kubeconfig file
          command: |
            aws eks update-kubeconfig --name altschool-exam-eks-cluster --region us-east-1
      - run:
          name: deploy sock shop app
          command: |
            cd sock-shop-app/kubernetes-app
            kubectl apply -f deployment.yml

  deploy-laravel-app:
    docker:
      - image: ubuntu-2204:2023.02.1
    steps:
      - checkout
      - run:
          name: install zip file compressor
          command: |
            sudo apt install zip -y
      - install_awscli
      - install_kubectl
      - run:
          name: update the local kubeconfig file
          command: |
            aws eks update-kubeconfig --name altschool-exam-eks-cluster --region us-east-1
      - run:
          name: deploy laravel app to eks cluster
          command: |
            cd laravel-app/kubernetes
            kubectl apply -f mysql-secret.yml
            kubectl apply -f laravel.yml && kubectl apply -f mysql.yml
            sleep 10
            kubectl get pods --no-headers -o custom-columns=":metadata.name" -n laravel| grep laravel | xargs echo > laravel-pod-name
            export LARAVEL_POD_NAME="$(cat ./laravel-pod-name)"
            rm laravel-pod-name
            kubectl exec -n laravel -it $LARAVEL_POD_NAME -- service php8.1-fpm restart
            kubectl exec -n laravel -it $LARAVEL_POD_NAME -- service nginx reload
            # kubectl exec -n laravel -it $LARAVEL_POD_NAME -- php artisan migrate --seed

  monitoring-and-logging:
    docker:
      - image: ubuntu-2204:2023.02.1
    steps:
      - checkout
      - run:
          name: install zip file compressor
          command: |
            sudo apt install zip -y
      - install_awscli
      - install_kubectl
      - run:
          name: update the local kubeconfig file
          command: |
            aws eks update-kubeconfig --name altschool-exam-eks-cluster --region us-east-1
      - run:
          name: creating service monitor for laravel app
          command: |
            cd monitoring-and-logging
            kubectl config set-context --current --namespace laravel
            helm install prometheus prometheus-community/kube-prometheus-stack
            helm install mysql-exporter prometheus-community/prometheus-mysql-exporter -f values.yml
            kubectl apply -f laravel-service-monitor.yml
      - run:
          name: creating service monitor for sock-shop app
          command: |
            cd monitoring-and-logging
            kubectl apply -f all-service-monitor.yml
            helm install loki grafana/loki-stack --namespace loki --create-namespace --set grafana.enabled=true --set loki.isDefault=false

  ingress-entry-point:
    docker:
      - image: ubuntu-2204:2023.02.1
    steps:
      - checkout
      - run:
          name: install zip file compressor
          command: |
            sudo apt install zip -y
      - install_awscli
      - install_kubectl
      - run:
          name: update the local kubeconfig file
          command: |
            aws eks update-kubeconfig --name altschool-exam-eks-cluster --region us-east-1
      - run:
          name: creating all entry ingress
          command: |
            cd ingress
            kubectl apply -f ingress.yml

workflows:
  dev-env:
    jobs:
      - build-docker-image
      - create-eks-cluster:
          requires: [build-docker-image]
      - deploy-sock-shop-app:
          requires: [create-eks-cluster]
      - deploy-laravel-app:
          requires: [create-eks-cluster]
      - monitoring-and-logging:
          requires: [deploy-sock-shop-app, deploy-laravel-app]
      - ingress-entry-point:
          requires: [monitoring-and-logging]
